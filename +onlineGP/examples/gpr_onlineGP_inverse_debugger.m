%====================== gpr_onlineGP_inverse_debugger =====================
%  
%  This code tests the onlineGP class on some toy data generated by 
%  Rasmussen; in particular, the fidelity of the Q matrix to the actual 
%  inverse of the kernel matrix generated by the basis vectors is checked. 
%
%  References(s):
%    Gaussian Processes for Machine Learning - Carl Rasmussen 
%
%====================== gpr_onlineGP_inverse_debugger =====================
%
%  Name:	gpr_basic_test_script.m
%
%  Author: 	Hassan A. Kingravi
%
%  Created:  2013/05/12
%  Modified: 2013/05/12
%
%====================== gpr_onlineGP_inverse_debugger =====================
clc; clear all, close all

% add path to onlineGP folder and data
addpath('../../')
addpath('./data')

load rasmussen_example_data1; % generated from a gaussian process using GPML software toolkit
z = linspace(min(x), max(x), 301)';

sigma = 0.1;
noise_p = 0.1^2;
params.A = 1; 

ncent = length(z);
internal_kernel_error = zeros(ncent,1);
external_kernel_error = zeros(ncent,1);
intra_kernel_error = zeros(ncent,1);

% test online version of online GP
reduced_set = 100;
tol = 2e-2;

tic
gpr_online = onlineGP.onlineGP(sigma,noise_p,reduced_set,tol);
gpr_online.process(x(1)',y(1)'); %initialize

nsamp = size(x,1);

% do sequential updates
for i=2:nsamp
 gpr_online.update(x(i)',y(i)');   
 
 currK = gpr_online.get('K');
 currQ = gpr_online.get('Q');
 
 currBV = gpr_online.get('BV');
 
 curr_size = gpr_online.get('current_size');
 
 I = eye(curr_size);
 realK = onlineGP.kernel(currBV,currBV,gpr_online.sigma);
 realQ = (realK)\I;
 
 % check how good these inverses are 
 internal_kernel_error(i) = norm(I - ((currK)*currQ));
 external_kernel_error(i) = norm(I - ((realK)*realQ));
 internal_kernel_error(i) = norm(I - ((realK)*currQ));
end

% now test regression
mean_online = zeros(ncent,1);
var_online = zeros(ncent,1);

for i =1:ncent
 [t1,t2] = gpr_online.predict(z(i)');
 mean_online(i) = t1;
 var_online(i) = t2;
end

BV = gpr_online.get('basis');
obs = gpr_online.get('obs');

toc

figure(1);
f = [mean_online+2*sqrt(var_online); flipdim(mean_online-2*sqrt(var_online),1)];
fill([z; flipdim(z,1)], f, [7 7 7]/8)
hold on; plot(z, mean_online,'k'); plot(x, y, '+r'); plot(BV,obs,'bo')
legend('2\sigma','mean','data','basis vectors')
title('Online GP Algorithm')

figure(2);
plot(internal_kernel_error,'r','LineWidth',2.0)
hold on; 
plot(external_kernel_error,'g','LineWidth',2.0)
hold on; 
plot(internal_kernel_error,'b','LineWidth',2.0)
legend('internal','external','intra')
title('Error for kernel inverses')


set(figure(1),'Position',[100 100 800 600]);
set(figure(2),'Position',[100 100 800 600]);

